{
	// The plugin looks for a .jsbeautifyrc file in the same directory as the
	// source file you're prettifying (or any directory above if it doesn't exist,
	// or in your home folder if everything else fails) and uses those options
	// along the default ones.
	// Details: https://github.com/victorporof/Sublime-HTMLPrettify#using-your-own-jsbeautifyrc-options
	// Documentation: https://github.com/einars/js-beautify/
	"html": {
		"allowed_file_extensions": [
			"htm",
			"html",
			"xhtml",
			"shtml",
			"xml",
			"svg",
			"dust",
			"blade",
			"php",
			"blade.php"
		],
		"brace_style": "collapse", // [collapse|expand|end-expand|none] Put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are
		"end_with_newline": true, // End output with newline
		"indent_char": " ", // Indentation character
		"indent_handlebars": true, // e.g. {{#foo}}, {{/foo}}
		"indent_inner_html": false, // Indent <head> and <body> sections
		"indent_scripts": "keep", // [keep|separate|normal]
		"indent_with_tabs": true,
		"indent_size": 4, // Indentation size
		// "indent_body_inner_html": true,
		"indent_body_inner_html": false,
		"indent_empty_lines": false,
		"indent_head_inner_html": true,
		// "indent_char": " ", // Indentation character
		// "indent_with_tabs": true,
		// "indent_scripts": "keep", // [keep|separate|normal]
		// "indent_size": 4, // Indentation size
		// "indent_handlebars": true, // e.g. {{#foo}}, {{/foo}}
		// "indent_inner_html": false, // Indent <head> and <body> sections
		// "indent_head_inner_html": true,
		// "indent_body_inner_html": false,
		// "indent_empty_lines": true,
		// "templating": [
		//     "auto"
		// ],
		// "wrap_attributes_indent_size": 0,
		// "void_elements": [
		//     "area",
		//     "base",
		//     "br",
		//     "col",
		//     "embed",
		//     "hr",
		//     "img",
		//     "input",
		//     "keygen",
		//     "link",
		//     "menuitem",
		//     "meta",
		//     "param",
		//     "source",
		//     "track",
		//     "wbr",
		//     "!doctype",
		//     "?xml",
		//     "?php",
		//     "?=",
		//     "basefont",
		//     "isindex"
		// ],
		"max_preserve_newlines": 10, // Maximum number of line breaks to be preserved in one chunk (0 disables)
		"preserve_newlines": true, // Whether existing line breaks before elements should be preserved (only works before elements, not inside tags or for text)
		"unformatted": [
			"a",
			"<!",
			"span",
			"img",
			"code",
			"pre",
			"sub",
			"sup",
			"em",
			"strong",
			"b",
			"i",
			"u",
			"strike",
			"big",
			"small",
			"pre",
			"h1",
			"h2",
			"h3",
			"h4",
			"h5",
			"h6",
			"</div>"
		], // List of tags that should not be reformatted
		"wrap_line_length": 0, // Lines should wrap at next opportunity after this number of characters (0 disables)
		"content_unformatted": [
			"pre",
			"textarea"
		],
		"eol": "\n",
		"extra_liners": [
			// "div",
			// "html",
			// "head",
			// "body",
			// "/html"
		],
		// "wrap_attributes": "align-multiple"
		"wrap_attributes": "auto"
		// "wrap_attributes": "force"
		// "wrap_attributes": "force-aligned"
		// "wrap_attributes": "force-expand-multiline"
		// "wrap_attributes": "preserve"
		// "wrap_attributes": "preserve-aligned"
	},
	"css": {
		// "allowed_file_extensions": ["css", "scss", "sass", "less"],
		// "end_with_newline": true, // End output with newline
		// "indent_char": " ", // Indentation character
		// "indent_size": 4, // Indentation size
		// "newline_between_rules": true, // Add a new line after every css rule
		// "selector_separator": " ",
		// "selector_separator_newline": true, // Separate selectors with newline or not (e.g. "a,\nbr" or "a, br")
		// "preserve_newlines": true,
		// "max_preserve_newlines": 10
	},
	"js": {
		"allowed_file_extensions": [
			"js",
			"json",
			"jshintrc",
			"jsbeautifyrc"
		],
		"brace_style": "collapse", // [collapse|expand|end-expand|none] Put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are
		"break_chained_methods": false, // Break chained method calls across subsequent lines
		"e4x": false, // Pass E4X xml literals through untouched
		"end_with_newline": false, // End output with newline
		"indent_char": " ", // Indentation character
		"indent_level": 0, // Initial indentation level
		"indent_size": 4, // Indentation size
		"indent_with_tabs": false, // Indent with tabs, overrides `indent_size` and `indent_char`
		"keep_array_indentation": false, // Preserve array indentation
		"keep_function_indentation": false, // Preserve function indentation
		"jslint_happy": false, // If true, then jslint-stricter mode is enforced
		"max_preserve_newlines": 0, // Maximum number of line breaks to be preserved in one chunk (0 disables)
		"preserve_newlines": true, // Whether existing line breaks should be preserved
		// "space_after_anon_function": false, // Should the space before an anonymous function's parens be added, "function()" vs "function ()"
		"space_after_anon_function": true, // Should the space before an anonymous function's parens be added, "function()" vs "function ()"
		// "space_before_conditional": true, // Should the space before conditional statement be added, "if(true)" vs "if (true)"
		"space_before_conditional": false, // Should the space before conditional statement be added, "if(true)" vs "if (true)"
		// "space_in_empty_paren": false, // Add padding spaces within empty paren, "f()" vs "f( )"
		"space_in_empty_paren": true, // Add padding spaces within empty paren, "f()" vs "f( )"
		// "space_in_paren": false, // Add padding spaces within paren, ie. f( a, b )
		"space_in_paren": true, // Add padding spaces within paren, ie. f( a, b )
		"unescape_strings": false // Should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"
		// "wrap_line_length": 0, // Lines should wrap at next opportunity after this number of characters (0 disables)
		// "comma_first": false,
		// "eol": "\n",
		// "indent_empty_lines": false,
		// "operator_position": "after-newline",
		// "operator_position": "before-newline",
		// "operator_position": "preserve-newline",
		// "space_after_named_function": false,
		// "templating": [
		//     "auto"
		// ],
		// "unindent_chained_methods": false,
	}
}
